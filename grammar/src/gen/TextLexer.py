# Generated from C:/Users/jose1/Documents/UFPI/6º período/Compiladores/antlr4-trab1/token-recognizer/grammar\Text.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,153,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,1,1,1,4,1,34,8,1,11,1,12,1,35,1,2,1,2,4,2,40,8,
        2,11,2,12,2,41,4,2,44,8,2,11,2,12,2,45,1,3,4,3,49,8,3,11,3,12,3,
        50,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,65,8,4,1,
        4,1,4,1,4,1,5,1,5,5,5,72,8,5,10,5,12,5,75,9,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
        5,97,8,5,1,6,4,6,100,8,6,11,6,12,6,101,1,7,1,7,4,7,106,8,7,11,7,
        12,7,107,1,7,1,7,1,8,1,8,4,8,114,8,8,11,8,12,8,115,1,8,1,8,1,8,1,
        8,4,8,122,8,8,11,8,12,8,123,1,8,1,8,3,8,128,8,8,1,9,1,9,1,9,1,10,
        1,10,1,10,5,10,136,8,10,10,10,12,10,139,9,10,1,11,1,11,1,11,1,11,
        1,12,1,12,1,13,4,13,148,8,13,11,13,12,13,149,1,13,1,13,0,0,14,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,1,0,7,9,0,33,34,39,39,44,46,58,59,63,63,91,91,93,93,123,123,125,
        125,2,0,65,90,97,122,1,0,65,90,18,0,45,45,65,90,97,122,160,163,167,
        167,169,170,173,173,179,181,186,186,195,195,352,353,402,402,8218,
        8218,8220,8221,8225,8226,8240,8240,8364,8364,65533,65533,1,0,48,
        57,2,0,10,10,13,13,2,0,9,9,32,32,172,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,43,1,0,0,0,7,48,1,
        0,0,0,9,64,1,0,0,0,11,96,1,0,0,0,13,99,1,0,0,0,15,103,1,0,0,0,17,
        127,1,0,0,0,19,129,1,0,0,0,21,132,1,0,0,0,23,140,1,0,0,0,25,144,
        1,0,0,0,27,147,1,0,0,0,29,30,7,0,0,0,30,2,1,0,0,0,31,33,7,1,0,0,
        32,34,7,2,0,0,33,32,1,0,0,0,34,35,1,0,0,0,35,33,1,0,0,0,35,36,1,
        0,0,0,36,4,1,0,0,0,37,39,7,2,0,0,38,40,3,7,3,0,39,38,1,0,0,0,40,
        41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,37,1,0,0,
        0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,6,1,0,0,0,47,49,7,
        3,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,
        8,1,0,0,0,52,53,5,82,0,0,53,65,5,36,0,0,54,55,5,85,0,0,55,56,5,83,
        0,0,56,65,5,36,0,0,57,58,5,226,0,0,58,59,5,8218,0,0,59,65,5,172,
        0,0,60,61,5,194,0,0,61,65,5,163,0,0,62,63,5,194,0,0,63,65,5,165,
        0,0,64,52,1,0,0,0,64,54,1,0,0,0,64,57,1,0,0,0,64,60,1,0,0,0,64,62,
        1,0,0,0,65,66,1,0,0,0,66,67,5,32,0,0,67,68,3,11,5,0,68,10,1,0,0,
        0,69,73,3,13,6,0,70,72,3,13,6,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,
        1,0,0,0,73,74,1,0,0,0,74,97,1,0,0,0,75,73,1,0,0,0,76,77,3,13,6,0,
        77,78,5,44,0,0,78,79,3,13,6,0,79,97,1,0,0,0,80,81,3,13,6,0,81,82,
        5,46,0,0,82,83,3,13,6,0,83,97,1,0,0,0,84,85,3,13,6,0,85,86,5,46,
        0,0,86,87,3,13,6,0,87,88,5,44,0,0,88,89,3,13,6,0,89,97,1,0,0,0,90,
        91,3,13,6,0,91,92,5,44,0,0,92,93,3,13,6,0,93,94,5,46,0,0,94,95,3,
        13,6,0,95,97,1,0,0,0,96,69,1,0,0,0,96,76,1,0,0,0,96,80,1,0,0,0,96,
        84,1,0,0,0,96,90,1,0,0,0,97,12,1,0,0,0,98,100,7,4,0,0,99,98,1,0,
        0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,14,1,0,0,
        0,103,105,5,34,0,0,104,106,3,7,3,0,105,104,1,0,0,0,106,107,1,0,0,
        0,107,105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,5,34,0,
        0,110,16,1,0,0,0,111,113,5,40,0,0,112,114,3,7,3,0,113,112,1,0,0,
        0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,
        0,117,118,5,41,0,0,118,128,1,0,0,0,119,121,5,40,0,0,120,122,3,7,
        3,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,
        0,0,124,125,1,0,0,0,125,126,5,41,0,0,126,128,1,0,0,0,127,111,1,0,
        0,0,127,119,1,0,0,0,128,18,1,0,0,0,129,130,3,11,5,0,130,131,5,37,
        0,0,131,20,1,0,0,0,132,133,5,64,0,0,133,137,3,7,3,0,134,136,3,11,
        5,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,
        0,0,138,22,1,0,0,0,139,137,1,0,0,0,140,141,3,11,5,0,141,142,5,194,
        0,0,142,143,5,186,0,0,143,24,1,0,0,0,144,145,7,5,0,0,145,26,1,0,
        0,0,146,148,7,6,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,
        0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,152,6,13,0,0,152,28,1,0,
        0,0,15,0,35,41,45,50,64,73,96,101,107,115,123,127,137,149,1,6,0,
        0
    ]

class TextLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PONTUATION = 1
    ACRONYM = 2
    OWN_NAME = 3
    WORD = 4
    MONEY = 5
    NUM = 6
    DIGIT = 7
    CITATION = 8
    DESCRIPTION = 9
    PERCENT = 10
    TWITTER_ACCOUNT = 11
    ORDINARY_NUMER = 12
    NEWLINE = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PONTUATION", "ACRONYM", "OWN_NAME", "WORD", "MONEY", "NUM", 
            "DIGIT", "CITATION", "DESCRIPTION", "PERCENT", "TWITTER_ACCOUNT", 
            "ORDINARY_NUMER", "NEWLINE", "WS" ]

    ruleNames = [ "PONTUATION", "ACRONYM", "OWN_NAME", "WORD", "MONEY", 
                  "NUM", "DIGIT", "CITATION", "DESCRIPTION", "PERCENT", 
                  "TWITTER_ACCOUNT", "ORDINARY_NUMER", "NEWLINE", "WS" ]

    grammarFileName = "Text.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


